{"version":3,"sources":["data/Types.js","data/DataStore.js","data/ShopReducer.js","data/placeholderData.js","shop/CategoryNavigation.js","shop/ProductList.js","shop/Shop.js","shop/ShopConnector.js","data/ActionCreators.js","App.js","serviceWorker.js","index.js"],"names":["DataTypes","ActionTypes","CFCommerceDataStore","createStore","storeData","action","type","payload","dataType","data","categories","products","id","name","category","description","price","CategoryNavigation","Link","className","to","this","props","baseUrl","map","cat","key","toLowerCase","Component","ProductList","length","p","toFixed","Shop","mapDispatchToProps","loadData","phData","filterProducts","filter","ShopConnector","connect","dataStore","Switch","Route","path","render","routeProps","match","params","Redirect","App","store","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAAaA,EACD,WADCA,EAEC,aAEDC,EACA,YCFAC,EAAsBC,aCDR,SAACC,EAAWC,GACrC,OAAQA,EAAOC,MACb,KAAKL,EACH,OAAO,2BACFG,GADL,kBAEGC,EAAOE,QAAQC,SAAWH,EAAOE,QAAQE,OAE9C,QACE,OAAOL,GAAa,O,wCCVbK,EAAO,CAClBC,WAAY,CAAC,OAAQ,QAAS,QAAS,UACvCC,SAAU,CACR,CACEC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,YAAa,eACbC,MAAO,IAET,CACEJ,GAAI,EACJC,KAAM,WACNC,SAAU,OACVC,YAAa,kBACbC,MAAO,IAET,CACEJ,GAAI,EACJC,KAAM,KACNC,SAAU,QACVC,YAAa,oBACbC,MAAO,GAET,CACEJ,GAAI,EACJC,KAAM,iBACNC,SAAU,QACVC,YAAa,gBACbC,MAAO,GAET,CACEJ,GAAI,EACJC,KAAM,aACNC,SAAU,QACVC,YAAa,gBACbC,MAAO,K,QCjCAC,EAAb,uKACY,IAAD,OACP,OACE,oCACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,8BAA8BC,GAAIC,KAAKC,MAAMC,SAA7D,OAGCF,KAAKC,MAAMZ,YACVW,KAAKC,MAAMZ,WAAWc,KAAI,SAACC,GAAD,OACxB,kBAACP,EAAA,EAAD,CACEC,UAAU,8BACVO,IAAKD,EACLL,GAAE,UAAK,EAAKE,MAAMC,QAAhB,YAA2BE,EAAIE,gBAEhCF,WAdf,GAAwCG,aCD3BC,EAAb,uKAEI,OAA2B,MAAvBR,KAAKC,MAAMX,UAAmD,IAA/BU,KAAKC,MAAMX,SAASmB,OAC9C,wBAAIX,UAAU,OAAd,eAEFE,KAAKC,MAAMX,SAASa,KAAI,SAACO,GAAD,OAC7B,yBAAKZ,UAAU,wBAAwBO,IAAKK,EAAEnB,IAC5C,4BACGmB,EAAElB,KACH,0BAAMM,UAAU,8CAAhB,IACIY,EAAEf,MAAMgB,QAAQ,KAGtB,yBAAKb,UAAU,0BAA0BY,EAAEhB,qBAbnD,GAAiCa,aCEpBK,EAAb,uKAEI,OACE,yBAAKd,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,YAAf,aAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACEI,QAAQ,iBACRb,WAAYW,KAAKC,MAAMZ,cAG3B,yBAAKS,UAAU,aACb,kBAAC,EAAD,CAAaR,SAAUU,KAAKC,MAAMX,kBAjB9C,GAA0BiB,aCOpBM,EAAqB,CACzBC,SCTsB,SAAC3B,GAAD,MAAe,CACrCF,KAAML,EACNM,QAAS,CACPC,SAAUA,EACVC,KAAM2B,EAAO5B,ODQX6B,EAAiB,eAAC1B,EAAD,uDAAY,GAAIG,EAAhB,8CACpBA,GAAyB,QAAbA,EAETH,EAAS2B,QACP,SAACP,GAAD,OAAOA,EAAEjB,SAASa,gBAAkBb,EAASa,iBAF/ChB,GAKO4B,EAAgBC,aAfL,SAACC,GAAD,sBACnBA,KAgBHP,EAF2BM,CAAA,uKAKf,IAAD,OACP,OACE,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,4BACLC,OAAQ,SAACC,GAAD,OACN,kBAAC,EAAD,iBACM,EAAKxB,MACLwB,EAFN,CAGEnC,SAAU0B,EACR,EAAKf,MAAMX,SACXmC,EAAWC,MAAMC,OAAOlC,gBAKhC,kBAACmC,EAAA,EAAD,CAAU7B,GAAG,sBArBM,0CA2BvBC,KAAKC,MAAMa,SAASnC,GACpBqB,KAAKC,MAAMa,SAASnC,OA5BG,GAIb4B,cEfKsB,E,uKAEjB,OACE,kBAAC,IAAD,CAAUC,MAAOjD,GACf,kBAAC,IAAD,KACE,kBAACwC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,KAAK,QAAQQ,UAAWb,IAC/B,kBAACU,EAAA,EAAD,CAAU7B,GAAG,iB,GAPQQ,aCCbyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2D,YCVNU,IAASZ,OACP,kBAAC,IAAMa,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.176159b8.chunk.js","sourcesContent":["export const DataTypes = {\n  PRODUCTS: 'products',\n  CATEGORIES: 'categories',\n};\nexport const ActionTypes = {\n  DATA_LOAD: 'data_load',\n};\n","import { createStore } from 'redux'\nimport { ShopReducer } from './ShopReducer'\n\nexport const CFCommerceDataStore = createStore(ShopReducer);","import { ActionTypes } from './Types';\n\nexport const ShopReducer = (storeData, action) => {\n  switch (action.type) {\n    case ActionTypes.DATA_LOAD:\n      return {\n        ...storeData,\n        [action.payload.dataType]: action.payload.data,\n      };\n    default:\n      return storeData || {};\n  }\n};\n","export const data = {\n  categories: ['Geek', 'Books', 'Pyrex', 'Disney'],\n  products: [\n    {\n      id: 1,\n      name: 'Optimus Prime',\n      category: 'Geek',\n      description: 'For Cyberton',\n      price: 20,\n    },\n    {\n      id: 2,\n      name: 'Megatron',\n      category: 'Geek',\n      description: 'Destroy Optimus',\n      price: 20,\n    },\n    {\n      id: 3,\n      name: 'It',\n      category: 'Books',\n      description: 'Stephen King Book',\n      price: 5,\n    },\n    {\n      id: 4,\n      name: 'Autumn Harvest',\n      category: 'Pyrex',\n      description: 'Vintage Pyrex',\n      price: 6,\n    },\n    {\n      id: 5,\n      name: 'Friendship',\n      category: 'Pyrex',\n      description: 'One of a kind',\n      price: 7,\n    },\n  ],\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class CategoryNavigation extends Component {\n  render() {\n    return (\n      <>\n        <Link className='btn btn-secondary btn-block' to={this.props.baseUrl}>\n          All\n        </Link>\n        {this.props.categories &&\n          this.props.categories.map((cat) => (\n            <Link\n              className='btn btn-secondary btn-block'\n              key={cat}\n              to={`${this.props.baseUrl}/${cat.toLowerCase()}`}\n            >\n              {cat}\n            </Link>\n          ))}\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport class ProductList extends Component {\n  render() {\n    if (this.props.products == null || this.props.products.length === 0) {\n      return <h5 className=\"p-2\">No Products</h5>;\n    }\n    return this.props.products.map((p) => (\n      <div className=\"card m-1 p-1 bg-light\" key={p.id}>\n        <h4>\n          {p.name}\n          <span className=\"badge badge-pill badge-primary float-right\">\n            ${p.price.toFixed(2)}\n          </span>\n        </h4>\n        <div className=\"card-taxt bg-white p-1\">{p.description}</div>\n      </div>\n    ));\n  }\n}\n","import React, { Component } from 'react';\nimport { CategoryNavigation } from './CategoryNavigation';\nimport { ProductList } from './ProductList';\n\nexport class Shop extends Component {\n  render() {\n    return (\n      <div className='container-fluid'>\n        <div className='row'>\n          <div className='col bg-dark text-white'>\n            <div className='navbrand'>CFStore</div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-3 p-2'>\n            <CategoryNavigation\n              baseUrl='/shop/products'\n              categories={this.props.categories}\n            />\n          </div>\n          <div className='col-9 p-2'>\n            <ProductList products={this.props.products} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { loadData } from '../data/ActionCreators';\nimport { DataTypes } from '../data/Types';\nimport { Shop } from './Shop';\n\nconst mapStateToProps = (dataStore) => ({\n  ...dataStore,\n});\n\nconst mapDispatchToProps = {\n  loadData,\n};\n\nconst filterProducts = (products = [], category) =>\n  !category || category === 'All'\n    ? products\n    : products.filter(\n        (p) => p.category.toLowerCase() === category.toLowerCase()\n      );\n\nexport const ShopConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(\n  class extends Component {\n    render() {\n      return (\n        <Switch>\n          <Route\n            path='/shop/products/:category?'\n            render={(routeProps) => (\n              <Shop\n                {...this.props}\n                {...routeProps}\n                products={filterProducts(\n                  this.props.products,\n                  routeProps.match.params.category\n                )}\n              />\n            )}\n          />\n          <Redirect to='/shop/products' />\n        </Switch>\n      );\n    }\n\n    componentDidMount() {\n      this.props.loadData(DataTypes.CATEGORIES);\n      this.props.loadData(DataTypes.PRODUCTS);\n    }\n  }\n);\n","import { ActionTypes } from './Types';\nimport { data as phData } from './placeholderData';\n\nexport const loadData = (dataType) => ({\n  type: ActionTypes.DATA_LOAD,\n  payload: {\n    dataType: dataType,\n    data: phData[dataType],\n  },\n});\n","import React, { Component } from 'react';\nimport { CFCommerceDataStore } from './data/DataStore';\nimport { Provider } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from 'react-router-dom';\nimport { ShopConnector } from './shop/ShopConnector';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Provider store={CFCommerceDataStore}>\n        <Router>\n          <Switch>\n            <Route path='/shop' component={ShopConnector} />\n            <Redirect to='/shop' />\n          </Switch>\n        </Router>\n      </Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}